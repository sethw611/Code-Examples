/* Business problem: Create a conditional probability analysis of prodcut categories to 
		identify trends of which products are commonly purchased by consumers 
		who purchase other products. i.e. if a consumer purchases product A,
		what is the likelihood they have also purchased product B.This can then 
		be visualized as a network of categories with weights attached to the 
		connections and probabilities associated with the products. The goal of
		the visualization here was to generate an example of how many complex 
		concepts we could fit into a graph. A final result would not be nearly as complex.

*/

/* Pull the consumers and the product categories they have purchased from transaction file /*?

proc sql;
	create table work.distinct_product as
		select distinct consumer_id,
			category
		from server1.product_transactions_2016_2017
		where consumer_id not is missing 
			and category not is missing;
quit;

/* Pull the list of cateogories into a macro list to be iterated over. */

proc sql;
	select distinct category
	from work.product_distinct
	where category not is missing;
	select distinct category
		into :category_1 - :category_&sqlobs
	from work.product_distinct
	where category not is missing;
quit;

/* Execute a macro that pulls the conditional probabilities. */

/* Set the number of observations. */

%let N1 = &sqlobs;

%macro category_probs;

/* Initialize do loop. /*

%do i=1 %to &N1;

/* pull list of consumers who have purchased category 1a */

proc sql;
	create table work.category_1_claims as
		select distinct consumer_id
		from work.product_distinct
		where category = "&&category_&i";
quit;

/* Pull the total list of categories that each consumer who has purchased 1a has also purchased */

proc sql;
	create table work.category_1 as
		select a.consumer_id,
			b.category
		from work.category_1_claims a
		left join work.product_distinct b
			on (a.consumer_id = b.consumer_id);
quit;

%do j=1 %to &N1;

/* Pull the count of consumers who have purchased cateogry 2 */

proc sql;
	select count(distinct(consumer_id))
		into :consumer_count
	from work.product_distinct
	where category = "&&category_&i";
quit;

/* Create a readable list of categories such that cateogry one is in the left column,
category 2 is in the middle, and the probability, or pct of consumers who purchased category 1
also purchased category 2 */

proc sql;
	create table work.category_count as
		select case
				when consumer_id not is missing then "&&category_&i"
				else ""
			end as category_1,
			case
				when consumer_id not is missing then "&&category_&j"
				else ""
			end as category_2,
			count(distinct(consumer_id))/&consumer_count as pct
		from work.category_1
		where category = "&&category_&j"
			group by category_1,
				category_2;
quit;

%if &j = 1 %then %do;

/* Combine all individual category tables into a single table */

proc sql;
	create table work.category_all_&i as
		select *
		from work.category_count;
quit;

%end;

%else %do;

proc sql;
	create table work.category_all_&i as
		select *
		from work.category_all_&i
		outer union corr
		select *
		from work.category_count;
quit;

%end;

%end;

%if &i = 1 %then %do;

proc sql;
	create table work.category_all_final as
		select distinct *
		from work.category_all_&i;
quit;

%end;

%else %do;

proc sql;
	create table work.category_all_final as
		select distinct *
		from work.category_all_final
		outer union corr
		select distinct *
		from work.category_all_&i;
quit;

%end;

%end;

%mend;

%category_probs;
run;


/* Switching to R code. Now the network visualization is created in R. */

library(igraph)
library(sand)


## Exclue categories whose probability is less than 10% ##
## Pull in file ##

product <- read.csv("filepath.....product_network.csv", header = T)

## Check the first several rows. Should be edgelist with two columns of nominal variables and ##
## one column of interval ##

head(product.10)

## Transform edgelist into graph object ##

product.net <- graph.data.frame(product.10, directed = T)

## Check to ensure it is a simple graph object ##

is_simple(product.net)

## Plot initial graph without any edits ##

plot(product.net, edge.curved = T, layout = layout.fruchterman.reingold(product.net))

## Create a function for creating a gray color gradient that is flexible depending on the total number of edges ##
## in the network. Want each edge to be a different shade of grey depending on the probability ##

color.gradient <- function(x, colors = c("grey100","grey8"), colsteps = length(x)){
	return(colorRampPalette(colors) (colsteps) [findInterval(x, seq(min(x),max(x), length.out = colsteps))])
}

## Do the same except for the node colors ##

color.gradient.2 <- function(x, colors = c("firebrick3", "orange", "yellow2"), colsteps = length(x)){
	return(colorRampPalette(colors) (colsteps) [findInterval(x, seq(min(x),max(x), length.out = colsteps))])
}

## Make the edge colors a gradient that reflects the probability that a given product b will be used ##
## by someone who uses product a ##

E(product.net)$color <- color.gradient(E(product.net)$pct)

## Make the node color a gradient that represents the out-degree of the node, or how likely it is that a product a ##
## will be used with other products ##

V(product.net)$color <- color.gradient.2(degree(product.net, mode = "out"))

## reduce the node names ##

V(product.net)$names <- sapply(strsplit(V(product.net)$name, "_"), function(x)x[2])

## Edit the distance of the labels ##

V(product.net)$labeldist <- ifelse(degree(product.net, mode = "in") < 20, 1, 0) 

pdf("filepath... productNetwork10.pdf")

## plot ##

set.seed(1546)

par(bg = "grey85")
plot(product.net, vertex.label.color = "black", 
		vertex.label.dist = V(product.net)$labeldist, 
		edge.curved = T, 
		layout = layout.fruchterman.reingold(product.net), 
		edge.color = E(product.net)$color, 
		edge.arrow.size = .7, 
		vertex.size = degree(product.net, mode = "in")/2, 
		vertex.color = V(product.net)$color, 
		vertex.label = V(product.net)$names,
		main = "Product Conditional Probability Network")

legend("bottomleft", 
	pch = 19,
	legend = c("Low","","","","","","","High"),
	col = colorRampPalette(c("firebrick3", "orange", "yellow2"))(8),
	cex = .7,
	bty = "n",
	title = "Out-Degree")

legend("topleft", 
	pch = 19,
	legend = c("Low","","","High"),
	col = "firebrick3",
	cex = .7,
	pt.cex = c(.7, 1, 1.2, 1.4),
	bty = "n",
	title = "In-Degree")

legend("topright",
	title = "Edge Lines",
	legend = c("Low Probability","","","","High Probability"),
	col = colorRampPalette(c("grey100","grey8"))(5),
	cex = .7,
	bty = "n",
	fill = colorRampPalette(c("grey100","grey8"))(5))


dev.off()
